{
   "AWSTemplateFormatVersion": "2010-09-09",
   "Description": "Simple Kong API Gateway and a scalable mock API",
   "Mappings": {
      "VpcCidrs": {
         "eu-central-1": {
            "vpc": "10.0.0.0/16",
            "pubsubnet1": "10.0.0.0/24",
            "pubsubnet2": "10.0.1.0/24"
         },
         "eu-west-1": {
            "vpc": "10.0.0.0/16",
            "pubsubnet1": "10.0.0.0/24",
            "pubsubnet2": "10.0.1.0/24"
         },
         "eu-west-2": {
            "vpc": "10.0.0.0/16",
            "pubsubnet1": "10.0.0.0/24",
            "pubsubnet2": "10.0.1.0/24"
         }
      },
      "RegionAMIs": {
         "eu-central-1": {
            "ami": "ami-e012d48f"
         },
         "eu-west-1": {
            "ami": "ami-ba346ec9"
         },
         "eu-west-2": {
            "ami": "ami-42c5cf26"
         }
      },
      "RegionKongAmiMap": {
         "eu-west-1": {
            "HVM": "ami-a10897d6"
         }
      }
   },
   "Resources": {
      "Vpc": {
         "Type": "AWS::EC2::VPC",
         "Properties": {
            "CidrBlock": {
               "Fn::FindInMap": [
                  "VpcCidrs",
                  {
                     "Ref": "AWS::Region"
                  },
                  "vpc"
               ]
            },
            "EnableDnsSupport": "true",
            "EnableDnsHostnames": "true",
            "Tags": [
               {
                  "Key": "Name",
                  "Value": "demo-vpc"
               },
               {
                  "Key": "Application",
                  "Value": {
                     "Ref": "AWS::StackId"
                  }
               }
            ]
         }
      },
      "PubSubnetAz1": {
         "Type": "AWS::EC2::Subnet",
         "Properties": {
            "VpcId": {
               "Ref": "Vpc"
            },
            "CidrBlock": {
               "Fn::FindInMap": [
                  "VpcCidrs",
                  {
                     "Ref": "AWS::Region"
                  },
                  "pubsubnet1"
               ]
            },
            "AvailabilityZone": {
               "Fn::Select": [
                  "0",
                  {
                     "Fn::GetAZs": {
                        "Ref": "AWS::Region"
                     }
                  }
               ]
            },
            "Tags": [
               {
                  "Key": "Name",
                  "Value": "pub-subnet-az1"
               },
               {
                  "Key": "Application",
                  "Value": {
                     "Ref": "AWS::StackId"
                  }
               }
            ]
         }
      },
      "PubSubnetAz2": {
         "Type": "AWS::EC2::Subnet",
         "Properties": {
            "VpcId": {
               "Ref": "Vpc"
            },
            "CidrBlock": {
               "Fn::FindInMap": [
                  "VpcCidrs",
                  {
                     "Ref": "AWS::Region"
                  },
                  "pubsubnet2"
               ]
            },
            "AvailabilityZone": {
               "Fn::Select": [
                  "1",
                  {
                     "Fn::GetAZs": {
                        "Ref": "AWS::Region"
                     }
                  }
               ]
            },
            "Tags": [
               {
                  "Key": "Name",
                  "Value": "pub-subnet-az2"
               },
               {
                  "Key": "Application",
                  "Value": {
                     "Ref": "AWS::StackId"
                  }
               }
            ]
         }
      },
      "InternetGateway": {
         "Type": "AWS::EC2::InternetGateway",
         "Properties": {
            "Tags": [
               {
                  "Key": "Application",
                  "Value": {
                     "Ref": "AWS::StackId"
                  }
               },
               {
                  "Key": "Network",
                  "Value": "Public"
               }
            ]
         }
      },
      "AttachGateway": {
         "Type": "AWS::EC2::VPCGatewayAttachment",
         "Properties": {
            "VpcId": {
               "Ref": "Vpc"
            },
            "InternetGatewayId": {
               "Ref": "InternetGateway"
            }
         }
      },
      "PublicRouteTable": {
         "Type": "AWS::EC2::RouteTable",
         "Properties": {
            "VpcId": {
               "Ref": "Vpc"
            }
         }
      },
      "PublicRoute": {
         "Type": "AWS::EC2::Route",
         "DependsOn": "AttachGateway",
         "Properties": {
            "RouteTableId": {
               "Ref": "PublicRouteTable"
            },
            "DestinationCidrBlock": "0.0.0.0/0",
            "GatewayId": {
               "Ref": "InternetGateway"
            }
         }
      },
      "PublicSubnet1RouteTableAssociation": {
         "Type": "AWS::EC2::SubnetRouteTableAssociation",
         "Properties": {
            "SubnetId": {
               "Ref": "PubSubnetAz1"
            },
            "RouteTableId": {
               "Ref": "PublicRouteTable"
            }
         }
      },
      "PublicSubnet2RouteTableAssociation": {
         "Type": "AWS::EC2::SubnetRouteTableAssociation",
         "Properties": {
            "SubnetId": {
               "Ref": "PubSubnetAz2"
            },
            "RouteTableId": {
               "Ref": "PublicRouteTable"
            }
         }
      },
      "ElbSecurityGroup": {
         "Type": "AWS::EC2::SecurityGroup",
         "Properties": {
            "GroupDescription": "ELB Allowed Ports",
            "VpcId": {
               "Ref": "Vpc"
            },
            "SecurityGroupIngress": [
               {
                  "IpProtocol": "tcp",
                  "FromPort": "80",
                  "ToPort": "80",
                  "CidrIp": "0.0.0.0/0"
               }
            ]
         }
      },
      "EcsSecurityGroup": {
         "Type": "AWS::EC2::SecurityGroup",
         "Properties": {
            "GroupDescription": "ECS Allowed Ports",
            "VpcId": {
               "Ref": "Vpc"
            },
            "SecurityGroupIngress": [
               {
                  "IpProtocol": "tcp",
                  "FromPort": "8080",
                  "ToPort": "8080",
                  "CidrIp": "0.0.0.0/0"
               },
               {
                  "IpProtocol": "tcp",
                  "FromPort": "1",
                  "ToPort": "65535",
                  "SourceSecurityGroupId": {
                     "Ref": "ElbSecurityGroup"
                  }
               }
            ]
         }
      },
      "EcsElasticLoadBalancer": {
         "Type": "AWS::ElasticLoadBalancingV2::LoadBalancer",
         "Properties": {
            "Name": "demo-ecs-lb",
            "Scheme": "internet-facing",
            "SecurityGroups": [
               {
                  "Ref": "ElbSecurityGroup"
               }
            ],
            "Subnets": [
               {
                  "Ref": "PubSubnetAz1"
               },
               {
                  "Ref": "PubSubnetAz2"
               }
            ]
         }
      },
      "EcsElasticLoadBalancerListener": {
         "Type": "AWS::ElasticLoadBalancingV2::Listener",
         "Properties": {
            "DefaultActions": [
               {
                  "TargetGroupArn": {
                     "Ref": "EcsElasticLoadBalancerTargetGroup"
                  },
                  "Type": "forward"
               }
            ],
            "LoadBalancerArn": {
               "Ref": "EcsElasticLoadBalancer"
            },
            "Port": 80,
            "Protocol": "HTTP"
         }
      },
      "EcsElasticLoadBalancerTargetGroup": {
         "Type": "AWS::ElasticLoadBalancingV2::TargetGroup",
         "Properties": {
            "HealthCheckIntervalSeconds": 30,
            "HealthCheckPath": "/",
            "HealthCheckProtocol": "HTTP",
            "HealthCheckTimeoutSeconds": 5,
            "HealthyThresholdCount": 5,
            "Name": "demo-ecs-tg",
            "Port": 8080,
            "Protocol": "HTTP",
            "UnhealthyThresholdCount": 5,
            "VpcId": {
               "Ref": "Vpc"
            }
         }
      },
      "EcsCluster": {
         "Type": "AWS::ECS::Cluster",
         "Properties": {
            "ClusterName": "demo"
         }
      },
      "EcsIamInstanceProfile": {
         "Type": "AWS::IAM::InstanceProfile",
         "Properties": {
            "Path": "/",
            "Roles": [
               {
                  "Ref": "EcsIamInstanceRole"
               }
            ]
         }
      },
      "EcsIamInstanceRole": {
         "Type": "AWS::IAM::Role",
         "Properties": {
            "AssumeRolePolicyDocument": {
               "Version": "2012-10-17",
               "Statement": [
                  {
                     "Effect": "Allow",
                     "Principal": {
                        "Service": [
                           "ec2.amazonaws.com"
                        ]
                     },
                     "Action": [
                        "sts:AssumeRole"
                     ]
                  }
               ]
            },
            "Path": "/",
            "Policies": [
               {
                  "PolicyName": "EcsIamInstancePolicy",
                  "PolicyDocument": {
                     "Version": "2012-10-17",
                     "Statement": [
                        {
                           "Effect": "Allow",
                           "Action": [
                              "ecs:CreateCluster",
                              "ecs:DeregisterContainerInstance",
                              "ecs:DiscoverPollEndpoint",
                              "ecs:Poll",
                              "ecs:RegisterContainerInstance",
                              "ecs:StartTelemetrySession",
                              "ecs:Submit*",
                              "ecr:GetAuthorizationToken",
                              "ecr:BatchCheckLayerAvailability",
                              "ecr:GetDownloadUrlForLayer",
                              "ecr:BatchGetImage",
                              "logs:CreateLogStream",
                              "logs:PutLogEvents"
                           ],
                           "Resource": "*"
                        }
                     ]
                  }
               }
            ]
         }
      },
      "EcsInstanceLaunchConfig": {
         "Type": "AWS::AutoScaling::LaunchConfiguration",
         "Properties": {
            "IamInstanceProfile": {
               "Ref": "EcsIamInstanceProfile"
            },
            "ImageId": {
               "Fn::FindInMap": [
                  "RegionAMIs",
                  {
                     "Ref": "AWS::Region"
                  },
                  "ami"
               ]
            },
            "InstanceType": "t2.micro",
            "InstanceMonitoring": false,
            "AssociatePublicIpAddress": true,
            "SecurityGroups": [
               {
                  "Ref": "EcsSecurityGroup"
               }
            ],
            "UserData": {
               "Fn::Base64": {
                  "Fn::Join": [
                     "",
                     [
                        "#!/bin/bash -xe\n",
                        "echo ECS_CLUSTER=",
                        {
                           "Ref": "EcsCluster"
                        },
                        " >> /etc/ecs/ecs.config\n"
                     ]
                  ]
               }
            }
         }
      },
      "EcsInstanceAsg": {
         "Type": "AWS::AutoScaling::AutoScalingGroup",
         "Properties": {
            "VPCZoneIdentifier": [
               {
                  "Fn::Join": [
                     ",",
                     [
                        {
                           "Ref": "PubSubnetAz1"
                        },
                        {
                           "Ref": "PubSubnetAz2"
                        }
                     ]
                  ]
               }
            ],
            "LaunchConfigurationName": {
               "Ref": "EcsInstanceLaunchConfig"
            },
            "MinSize": "1",
            "MaxSize": "1",
            "DesiredCapacity": "1",
            "Tags": [
               {
                  "Key": "Name",
                  "Value": {
                     "Fn::Join": [
                        "",
                        [
                           "ECS Instance - ",
                           {
                              "Ref": "AWS::StackName"
                           }
                        ]
                     ]
                  },
                  "PropagateAtLaunch": "true"
               }
            ]
         }
      },
      "ContainerService": {
         "Type": "AWS::ECS::Service",
         "DependsOn": "EcsElasticLoadBalancerListener",
         "Properties": {
            "Cluster": {
               "Ref": "EcsCluster"
            },
            "DeploymentConfiguration": {
               "MaximumPercent": 200,
               "MinimumHealthyPercent": 0
            },
            "DesiredCount": 2,
            "LoadBalancers": [
               {
                  "ContainerName": "load-sink",
                  "ContainerPort": 8080,
                  "TargetGroupArn": {
                     "Ref": "EcsElasticLoadBalancerTargetGroup"
                  }
               }
            ],
            "Role": "arn:aws:iam::023953048683:role/ecsServiceRole",
            "TaskDefinition": {
               "Ref": "TaskDefinition"
            }
         }
      },
      "TaskDefinition": {
         "Type": "AWS::ECS::TaskDefinition",
         "Properties": {
            "ContainerDefinitions": [
               {
                  "PortMappings": [
                     {
                        "HostPort": 0,
                        "ContainerPort": 8080,
                        "Protocol": "tcp"
                     }
                  ],
                  "Cpu": 0,
                  "Essential": true,
                  "Image": "billglover/load-sink",
                  "Memory": 32,
                  "Name": "load-sink"
               }
            ],
            "Family": "load-sink-demo"
         }
      },
      "KongAsg": {
         "Type": "AWS::AutoScaling::AutoScalingGroup",
         "CreationPolicy": {
            "ResourceSignal": {
               "Count": 2,
               "Timeout": "PT15M"
            }
         },
         "Properties": {
            "VPCZoneIdentifier": [
               {
                  "Fn::Join": [
                     ",",
                     [
                        {
                           "Ref": "PubSubnetAz1"
                        },
                        {
                           "Ref": "PubSubnetAz2"
                        }
                     ]
                  ]
               }
            ],
            "LaunchConfigurationName": {
               "Ref": "KongLaunchConfig"
            },
            "MinSize": "1",
            "MaxSize": "2",
            "DesiredCapacity": "2",
            "LoadBalancerNames": [
               {
                  "Ref": "KongLoadBalancer"
               }
            ],
            "Tags": [
               {
                  "Key": "Name",
                  "Value": {
                     "Fn::Join": [
                        "",
                        [
                           "Kong - ",
                           {
                              "Ref": "AWS::StackName"
                           }
                        ]
                     ]
                  },
                  "PropagateAtLaunch": "true"
               }
            ]
         }
      },
      "KongLaunchConfig": {
         "Type": "AWS::AutoScaling::LaunchConfiguration",
         "Properties": {
            "AssociatePublicIpAddress": true,
            "ImageId": {
               "Fn::FindInMap": [
                  "RegionKongAmiMap",
                  {
                     "Ref": "AWS::Region"
                  },
                  "HVM"
               ]
            },
            "InstanceType": "t2.micro",
            "InstanceMonitoring": false,
            "SecurityGroups": [
               {
                  "Ref": "KongSecurityGroup"
               }
            ],
            "UserData": {
               "Fn::Base64": {
                  "Fn::Join": [
                     "",
                     [
                        "#!\/bin\/bash\n",
                        "yum update -y aws-cfn-bootstrap\n",
                        "echo '* soft nofile 65000' >> \/etc\/security\/limits.conf\n",
                        "echo '* hard nofile 65000' >> \/etc\/security\/limits.conf\n",
                        "kong_version=0.9.7",
                        "\n",
                        "wget -O kong.rpm https://github.com/Mashape/kong/releases/download/$kong_version/kong-$kong_version.aws.rpm\n",
                        "if [ -e \".\/kong.rpm\" ]\n",
                        "then\n",
                        "   echo \"Installing Kong...\" \n",
                        "else\n",
                        "   /opt/aws/bin/cfn-signal -e 1 --stack ",
                        {
                           "Ref": "AWS::StackName"
                        },
                        " --resource KongAsg ",
                        " --region ",
                        {
                           "Ref": "AWS::Region"
                        },
                        " --reason \"Failed to download Kong\" \n",
                        "   echo \"failed to download kong, exiting...\" \n",
                        "   exit\n",
                        "fi\n",
                        "yum install -y epel-release\n",
                        "yum install -y kong.rpm --nogpgcheck\n",
                        "export KONG_DATABASE=postgres\n",
                        "export KONG_PG_HOST=",
                        {
                           "Fn::GetAtt": [
                              "PostgresDB",
                              "Endpoint.Address"
                           ]
                        },
                        "\n",
                        "export KONG_PG_PORT=",
                        {
                           "Fn::GetAtt": [
                              "PostgresDB",
                              "Endpoint.Port"
                           ]
                        },
                        "\n",
                        "export KONG_PG_USER=kong",
                        "\n",
                        "export KONG_PG_DATABASE=kong",
                        "\n",
                        "export KONG_PG_PASSWORD=changeit",
                        "\n",
                        "export KONG_SERF_PATH=\/usr\/local\/bin\/serf\n",
                        "sleep `echo $(( RANDOM % ( 120 - 30 + 1 ) + 30 ))`\n",
                        "COUNTER=0\n",
                        "while [ $COUNTER -lt 4 ]; do\n",
                        "   /usr/local/bin/kong health\n",
                        "   if [[ $? -ne 0 ]]; then\n",
                        "      echo \"trying to start kong..\"\n",
                        "      su -s \/bin\/sh -c \"\/usr\/local\/bin\/kong start\" ec2-user\n",
                        "      let COUNTER=COUNTER+1\n",
                        "      sleep `echo $(( RANDOM % ( 120 - 30 + 1 ) + 30 ))`\n",
                        "   else\n",
                        "      /opt/aws/bin/cfn-signal -e 0 --stack ",
                        {
                           "Ref": "AWS::StackName"
                        },
                        " --resource KongAsg ",
                        " --region ",
                        {
                           "Ref": "AWS::Region"
                        },
                        " --reason \"Kong setup completed\" \n",
                        "      break \n",
                        "   fi\n",
                        "done\n",
                        "if ! /usr/local/bin/kong health; then\n",
                        "   echo \"failed to start kong, exiting...\" \n",
                        "   /opt/aws/bin/cfn-signal -e 1 --stack ",
                        {
                           "Ref": "AWS::StackName"
                        },
                        " --resource KongAsg ",
                        " --region ",
                        {
                           "Ref": "AWS::Region"
                        },
                        " --reason \"Failed to start Kong\" \n",
                        "fi\n"
                     ]
                  ]
               }
            }
         }
      },
      "KongSecurityGroup": {
         "Type": "AWS::EC2::SecurityGroup",
         "Properties": {
            "GroupDescription": "Enable SSH access and HTTP access on the inbound port",
            "VpcId": {
               "Ref": "Vpc"
            },
            "SecurityGroupIngress": [
               {
                  "IpProtocol": "tcp",
                  "FromPort": "8000",
                  "ToPort": "8001",
                  "SourceSecurityGroupId": {
                     "Ref": "KongLoadBalancerSecurityGroup"
                  }
               },
               {
                  "IpProtocol": "tcp",
                  "FromPort": "22",
                  "ToPort": "22",
                  "CidrIp": "0.0.0.0/0"
               }
            ],
            "SecurityGroupEgress": [
               {
                  "IpProtocol": "tcp",
                  "FromPort": "1",
                  "ToPort": "65535",
                  "CidrIp": "0.0.0.0/0"
               }
            ]
         }
      },
      "Ingress7946": {
         "Type": "AWS::EC2::SecurityGroupIngress",
         "Properties": {
            "GroupId": {
               "Fn::GetAtt": [
                  "KongSecurityGroup",
                  "GroupId"
               ]
            },
            "IpProtocol": "tcp",
            "FromPort": "7946",
            "ToPort": "7946",
            "SourceSecurityGroupId": {
               "Fn::GetAtt": [
                  "KongSecurityGroup",
                  "GroupId"
               ]
            }
         }
      },
      "DBSubnetGroup": {
         "Type": "AWS::RDS::DBSubnetGroup",
         "Properties": {
            "DBSubnetGroupDescription": "Subnets available for the RDS DB Instance",
            "SubnetIds": [
               {
                  "Ref": "PubSubnetAz1"
               },
               {
                  "Ref": "PubSubnetAz2"
               }
            ]
         }
      },
      "PostgresDB": {
         "Type": "AWS::RDS::DBInstance",
         "Properties": {
            "Engine": "postgres",
            "DBName": "kong",
            "MasterUsername": "kong",
            "DBInstanceClass": "db.t2.micro",
            "AllocatedStorage": "5",
            "MasterUserPassword": "changeit",
            "DBSubnetGroupName": {
               "Ref": "DBSubnetGroup"
            },
            "PubliclyAccessible": false,
            "EngineVersion": "9.5.2",
            "MultiAZ": false,
            "StorageEncrypted": false,
            "StorageType": "gp2",
            "VPCSecurityGroups": [
               {
                  "Ref": "DBSecurityGroup"
               }
            ]
         },
         "DeletionPolicy": "Delete"
      },
      "DBSecurityGroup": {
         "Type": "AWS::EC2::SecurityGroup",
         "Properties": {
            "GroupDescription": "Database security groups",
            "SecurityGroupIngress": [
               {
                  "IpProtocol": "tcp",
                  "FromPort": "5432",
                  "ToPort": "5432",
                  "SourceSecurityGroupId": {
                     "Ref": "KongSecurityGroup"
                  }
               },
               {
                  "IpProtocol": "tcp",
                  "FromPort": "22",
                  "ToPort": "22",
                  "CidrIp": "0.0.0.0/0"
               }
            ],
            "SecurityGroupEgress": [
               {
                  "IpProtocol": "tcp",
                  "FromPort": "1",
                  "ToPort": "65535",
                  "CidrIp": "0.0.0.0/0"
               }
            ],
            "VpcId": {
               "Ref": "Vpc"
            }
         }
      },
      "KongLoadBalancer": {
         "Type": "AWS::ElasticLoadBalancing::LoadBalancer",
         "Properties": {
            "SecurityGroups": [
               {
                  "Ref": "KongLoadBalancerSecurityGroup"
               }
            ],
            "Subnets": [
               {
                  "Ref": "PubSubnetAz1"
               },
               {
                  "Ref": "PubSubnetAz2"
               }
            ],
            "CrossZone": "true",
            "Listeners": [
               {
                  "LoadBalancerPort": "8000",
                  "InstancePort": "8000",
                  "Protocol": "HTTP"
               },
               {
                  "LoadBalancerPort": "8001",
                  "InstancePort": "8001",
                  "Protocol": "HTTP"
               }
            ],
            "HealthCheck": {
               "Target": "TCP:8000",
               "HealthyThreshold": "3",
               "UnhealthyThreshold": "5",
               "Interval": "90",
               "Timeout": "60"
            }
         }
      },
      "KongLoadBalancerSecurityGroup": {
         "Type": "AWS::EC2::SecurityGroup",
         "Properties": {
            "GroupDescription": "Enable HTTP access on port 8000 and 8001",
            "VpcId": {
               "Ref": "Vpc"
            },
            "SecurityGroupIngress": [
               {
                  "IpProtocol": "tcp",
                  "FromPort": "8000",
                  "ToPort": "8000",
                  "CidrIp": "0.0.0.0/0"
               },
               {
                  "IpProtocol": "tcp",
                  "FromPort": "8001",
                  "ToPort": "8001",
                  "CidrIp": "0.0.0.0/0"
               }
            ],
            "SecurityGroupEgress": [
               {
                  "IpProtocol": "tcp",
                  "FromPort": "1",
                  "ToPort": "65535",
                  "CidrIp": "0.0.0.0/0"
               }
            ]
         }
      }
   },
   "Outputs": {
      "EcsInstanceAsgName": {
         "Description": "Auto Scaling Group Name for ECS Instances",
         "Value": {
            "Ref": "EcsInstanceAsg"
         }
      },
      "EcsElbName": {
         "Description": "Load Balancer for ECS Service",
         "Value": {
            "Ref": "EcsElasticLoadBalancer"
         }
      },
      "ProxyURL": {
         "Description": "Kong Proxy URL",
         "Value": {
            "Fn::Join": [
               "",
               [
                  "http:\/\/",
                  {
                     "Fn::GetAtt": [
                        "KongLoadBalancer",
                        "DNSName"
                     ]
                  },
                  ":8000"
               ]
            ]
         }
      },
      "AdminURL": {
         "Description": "Kong Admin URL",
         "Value": {
            "Fn::Join": [
               "",
               [
                  "http:\/\/",
                  {
                     "Fn::GetAtt": [
                        "KongLoadBalancer",
                        "DNSName"
                     ]
                  },
                  ":8001"
               ]
            ]
         }
      }
   }
}